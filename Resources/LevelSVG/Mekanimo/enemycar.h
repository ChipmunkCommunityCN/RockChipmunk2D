//Auto-generated by Mekanimo (www.mekanimo.net) on Fri Sep 17 16:29:26 2010
//Don't forget to add the following line to g_testEntries[] in testentries.cpp as a test entry.
//{"enemycar.h", enemycar.h::Create},
#ifndef ENEMYCAR.H_H
#define ENEMYCAR.H_H
class enemycar.h : public Test
{
public:
    enemycar.h()
    {
    
        b2BodyDef bodyDef;
        b2Vec2 initVel;
        b2PolygonShape shape;
        b2CircleShape circleShape;
        b2FixtureDef fd;
        b2RevoluteJointDef revJointDef;
        b2DistanceJointDef jointDef;
        b2Vec2 pos;
        b2Vec2 axis;
        
        
        //Polygons
        //suspensionLeft
        bodyDef.position.Set(-0.483184f, -0.188442f);
        bodyDef.angle = 0.000000f;
        b2Body* suspensionLeft = m_world->CreateBody(&bodyDef);
        initVel.Set(0.000000f, 0.000000f);
        suspensionLeft->SetLinearVelocity(initVel);
        suspensionLeft->SetAngularVelocity(0.000000f);
        
        b2Vec2 suspensionLeft_vertices[4];
        suspensionLeft_vertices[0].Set(-0.061740f, -0.112743f);
        suspensionLeft_vertices[1].Set(0.061740f, -0.112743f);
        suspensionLeft_vertices[2].Set(0.061740f, 0.112743f);
        suspensionLeft_vertices[3].Set(-0.061740f, 0.112743f);
        shape.Set(suspensionLeft_vertices, 4);
        fd.shape = &shape;
        fd.density = 0.015000f;
        fd.friction = 0.300000f;
        fd.restitution = 0.600000f;
        fd.filter.groupIndex = int16(0);
        fd.filter.categoryBits = uint16(65535);
        fd.filter.maskBits = uint16(65535);
        
        suspensionLeft->CreateFixture(&fd);
        
        //suspensionRight
        bodyDef.position.Set(0.518080f, -0.196495f);
        bodyDef.angle = 0.000000f;
        b2Body* suspensionRight = m_world->CreateBody(&bodyDef);
        initVel.Set(0.000000f, 0.000000f);
        suspensionRight->SetLinearVelocity(initVel);
        suspensionRight->SetAngularVelocity(0.000000f);
        
        b2Vec2 suspensionRight_vertices[4];
        suspensionRight_vertices[0].Set(-0.069793f, -0.115427f);
        suspensionRight_vertices[1].Set(0.069793f, -0.115427f);
        suspensionRight_vertices[2].Set(0.069793f, 0.115427f);
        suspensionRight_vertices[3].Set(-0.069793f, 0.115427f);
        shape.Set(suspensionRight_vertices, 4);
        fd.shape = &shape;
        fd.density = 0.015000f;
        fd.friction = 0.300000f;
        fd.restitution = 0.600000f;
        fd.filter.groupIndex = int16(0);
        fd.filter.categoryBits = uint16(65535);
        fd.filter.maskBits = uint16(65535);
        
        suspensionRight->CreateFixture(&fd);
        
        
        //Circles
        //wheelLeft
        bodyDef.position.Set(-0.485868f, -0.301185f);
        bodyDef.angle = 0.000000f;
        b2Body* wheelLeft = m_world->CreateBody(&bodyDef);
        initVel.Set(0.000000f, 0.000000f);
        wheelLeft->SetLinearVelocity(initVel);
        wheelLeft->SetAngularVelocity(0.000000f);
        circleShape.m_radius = 0.250000f;
        fd.shape = &circleShape;
        fd.density = 0.015000f;
        fd.friction = 0.300000f;
        fd.restitution = 0.600000f;
        fd.filter.groupIndex = int16(0);
        fd.filter.categoryBits = uint16(65535);
        fd.filter.maskBits = uint16(65535);
        
        wheelLeft->CreateFixture(&fd);
        
        //wheelRight
        bodyDef.position.Set(0.507343f, -0.274341f);
        bodyDef.angle = 0.000000f;
        b2Body* wheelRight = m_world->CreateBody(&bodyDef);
        initVel.Set(0.000000f, 0.000000f);
        wheelRight->SetLinearVelocity(initVel);
        wheelRight->SetAngularVelocity(0.000000f);
        circleShape.m_radius = 0.250000f;
        fd.shape = &circleShape;
        fd.density = 0.015000f;
        fd.friction = 0.300000f;
        fd.restitution = 0.600000f;
        fd.filter.groupIndex = int16(0);
        fd.filter.categoryBits = uint16(65535);
        fd.filter.maskBits = uint16(65535);
        
        wheelRight->CreateFixture(&fd);
        
        //Compounds (shapes welded together)
        //Compound 0
        bodyDef.position.Set(0.007901f, 0.138810f);
        bodyDef.angle = 0.0f;
        b2Body* compound0 = m_world->CreateBody(&bodyDef);
        initVel.Set(0.0f, 0.0f);
        compound0->SetLinearVelocity(initVel);
        compound0->SetAngularVelocity(0.0f);
        //cartLeft
        b2Vec2 cartLeft_vertices[4];
        cartLeft_vertices[0].Set(-0.568931f, -0.284302f);
        cartLeft_vertices[1].Set(-0.413239f, -0.284302f);
        cartLeft_vertices[2].Set(-0.413239f, 0.005608f);
        cartLeft_vertices[3].Set(-0.568931f, 0.005608f);
        shape.Set(cartLeft_vertices, 4);
        fd.shape = &shape;
        fd.density = 0.015000f;
        fd.friction = 0.300000f;
        fd.restitution = 0.600000f;
        fd.filter.groupIndex = int16(0);
        fd.filter.categoryBits = uint16(65535);
        fd.filter.maskBits = uint16(65535);
        compound0->CreateFixture(&fd);
        //cartUpper
        b2Vec2 cartUpper_vertices[4];
        cartUpper_vertices[0].Set(-0.807901f, -0.144716f);
        cartUpper_vertices[1].Set(0.792099f, -0.144716f);
        cartUpper_vertices[2].Set(0.792099f, 0.193513f);
        cartUpper_vertices[3].Set(-0.807901f, 0.193513f);
        shape.Set(cartUpper_vertices, 4);
        fd.shape = &shape;
        fd.density = 0.015000f;
        fd.friction = 0.300000f;
        fd.restitution = 0.600000f;
        fd.filter.groupIndex = int16(0);
        fd.filter.categoryBits = uint16(65535);
        fd.filter.maskBits = uint16(65535);
        compound0->CreateFixture(&fd);
        //cartRight
        b2Vec2 cartRight_vertices[4];
        cartRight_vertices[0].Set(0.424280f, -0.300408f);
        cartRight_vertices[1].Set(0.579973f, -0.300408f);
        cartRight_vertices[2].Set(0.579973f, 0.037820f);
        cartRight_vertices[3].Set(0.424280f, 0.037820f);
        shape.Set(cartRight_vertices, 4);
        fd.shape = &shape;
        fd.density = 0.015000f;
        fd.friction = 0.300000f;
        fd.restitution = 0.600000f;
        fd.filter.groupIndex = int16(0);
        fd.filter.categoryBits = uint16(65535);
        fd.filter.maskBits = uint16(65535);
        compound0->CreateFixture(&fd);
        
        //Revolute joints
        pos.Set(-0.475131f, -0.290447f);
        revJointDef.Initialize(suspensionLeft, wheelLeft, pos);
        revJointDef.collideConnected = false;
        m_world->CreateJoint(&revJointDef);
        
        //Motors
        pos.Set(0.528818f, -0.279710f);
        revJointDef.Initialize(suspensionRight, wheelRight, pos);
        revJointDef.collideConnected = false;
        revJointDef.maxMotorTorque = 10000.000000f;
        revJointDef.motorSpeed = 160.000000f / 60;
        revJointDef.enableMotor = true;
        m_world->CreateJoint(&revJointDef);
        
        //Vertical constraints
        b2PrismaticJointDef vPrismJointDef;
        pos.Set(0.501974f, -0.107911f);
        axis.Set(0.0f, 1.0f);
        vPrismJointDef.Initialize(suspensionRight, compound0, pos, axis);
        m_world->CreateJoint(&vPrismJointDef);
        
        pos.Set(-0.491237f, -0.113280f);
        axis.Set(0.0f, 1.0f);
        vPrismJointDef.Initialize(suspensionLeft, compound0, pos, axis);
        m_world->CreateJoint(&vPrismJointDef);
        
    }
    static Test* Create()
    {
        return new enemycar.h;
    }
};
#endif
